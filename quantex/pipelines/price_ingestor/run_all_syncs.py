# El Orquestador Principal. Es el script m√°s importante que ejecuta todas las sincronizaciones autom√°ticas diarias (Yahoo, EODHD, BCE).

import os
import sys
import logging
from datetime import datetime, timedelta
import pandas as pd
import traceback

# --- Configuraci√≥n de Rutas y Conexi√≥n ---
PROJECT_ROOT = os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..', '..'))
if PROJECT_ROOT not in sys.path:
    sys.path.append(PROJECT_ROOT)
from dotenv import load_dotenv
load_dotenv(os.path.join(PROJECT_ROOT, '.env'))

from quantex.core.database_manager import supabase

# --- Configuraci√≥n de Logging ---
# Logging solo a consola, sin archivos

# --- Sistema de Reporte Final ---
class SyncReport:
    def __init__(self):
        self.start_time = datetime.now()
        self.end_time = None
        self.results = {}
        self.errors = {}
        self.summary = {}
        
    def add_result(self, source, success, details=None, error=None):
        """Agrega un resultado de sincronizaci√≥n"""
        self.results[source] = {
            'success': success,
            'details': details or {},
            'error': error,
            'timestamp': datetime.now()
        }
        
        if not success and error:
            self.errors[source] = error
            
    def finalize(self):
        """Finaliza el reporte y genera estad√≠sticas"""
        self.end_time = datetime.now()
        self.duration = self.end_time - self.start_time
        
        # Calcular estad√≠sticas
        total_sources = len(self.results)
        successful_sources = sum(1 for r in self.results.values() if r['success'])
        failed_sources = total_sources - successful_sources
        
        self.summary = {
            'total_sources': total_sources,
            'successful_sources': successful_sources,
            'failed_sources': failed_sources,
            'success_rate': (successful_sources / total_sources * 100) if total_sources > 0 else 0,
            'duration': self.duration
        }
        
    def generate_report(self):
        """Genera el reporte final completo"""
        self.finalize()
        
        report = f"""
{'='*80}
üìä REPORTE FINAL DE SINCRONIZACI√ìN AUTOM√ÅTICA
{'='*80}

üïê INFORMACI√ìN GENERAL:
   üìÖ Fecha de ejecuci√≥n: {self.start_time.strftime('%Y-%m-%d %H:%M:%S')}
   ‚è±Ô∏è  Duraci√≥n total: {self.duration}
   üéØ Fuentes procesadas: {self.summary['total_sources']}
   ‚úÖ Exitosas: {self.summary['successful_sources']}
   ‚ùå Fallidas: {self.summary['failed_sources']}
   üìà Tasa de √©xito: {self.summary['success_rate']:.1f}%

{'='*80}
üìã DETALLE POR FUENTE:
{'='*80}
"""
        
        for source, result in self.results.items():
            status = "‚úÖ √âXITO" if result['success'] else "‚ùå FALLO"
            report += f"""
üî∏ {source.upper()}
   Status: {status}
   Timestamp: {result['timestamp'].strftime('%H:%M:%S')}
"""
            
            if result['success'] and result['details']:
                for key, value in result['details'].items():
                    report += f"   {key}: {value}\n"
                    
            if not result['success'] and result['error']:
                report += f"   Error: {result['error']}\n"
        
        if self.errors:
            report += f"""
{'='*80}
‚ùå ERRORES DETALLADOS:
{'='*80}
"""
            for source, error in self.errors.items():
                report += f"""
üî∏ {source.upper()}
   Error: {error}
"""
        
        report += f"""
{'='*80}
üéØ RESUMEN EJECUTIVO:
{'='*80}
"""
        
        if self.summary['success_rate'] == 100:
            report += "üéâ PERFECTO: 100% de las fuentes sincronizadas exitosamente\n"
        elif self.summary['success_rate'] >= 90:
            report += "üéâ EXCELENTE: M√°s del 90% de las fuentes sincronizadas exitosamente\n"
        elif self.summary['success_rate'] >= 70:
            report += "‚úÖ BUENO: M√°s del 70% de las fuentes sincronizadas exitosamente\n"
        elif self.summary['success_rate'] >= 50:
            report += "‚ö†Ô∏è  REGULAR: M√°s del 50% de las fuentes sincronizadas exitosamente\n"
        else:
            report += "‚ùå CR√çTICO: Menos del 50% de las fuentes sincronizadas exitosamente\n"
        
        report += f"""
üìä Estad√≠sticas:
   ‚Ä¢ Total de fuentes: {self.summary['total_sources']}
   ‚Ä¢ Exitosas: {self.summary['successful_sources']}
   ‚Ä¢ Fallidas: {self.summary['failed_sources']}
   ‚Ä¢ Tasa de √©xito: {self.summary['success_rate']:.1f}%
   ‚Ä¢ Duraci√≥n: {self.duration}

{'='*80}
üìù LOG COMPLETO DISPONIBLE EN: {os.path.join(PROJECT_ROOT, 'logs')}
{'='*80}
"""
        
        return report

# --- Importamos a todos nuestros especialistas autom√°ticos ---
from quantex.pipelines.price_ingestor.yahoo_finance import sync_yfinance_data_to_supabase
from quantex.pipelines.price_ingestor.eodhd_client import sync_eodhd_data_to_supabase, sync_us_treasuries_yields
from quantex.pipelines.price_ingestor.bce_client import sync_bce_rates
from quantex.pipelines.price_ingestor.sync_bcentral import sync_all_bcentral_series
from quantex.pipelines.price_ingestor.cochilco_final_bot import FinalCochilcoBot
from quantex.pipelines.price_ingestor.smm_playwright_bot import SMMPlaywrightBot
from quantex.pipelines.price_ingestor.benchmarks import sync_btp_benchmarks, sync_latam_currency_index, sync_latam_currency_index_historical

def sync_cochilco_inventories(report):
    """
    Sincroniza inventarios de cobre desde Cochilco usando el bot Selenium.
    """
    print("üîÑ Iniciando sincronizaci√≥n de inventarios de cobre (Cochilco)...")
    logging.info("Iniciando sincronizaci√≥n Cochilco")
    
    try:
        bot = FinalCochilcoBot(headless=False)  # VISIBLE
        success = bot.run_final_workflow()
        
        if success:
            print("‚úÖ Inventarios de cobre sincronizados exitosamente")
            logging.info("Cochilco: Sincronizaci√≥n exitosa")
            
            # Extraer detalles del resultado
            details = {}
            if hasattr(success, 'keys'):
                for key, value in success.items():
                    if hasattr(value, 'shape'):
                        details[f"{key}_registros"] = len(value)
                    else:
                        details[key] = str(value)[:100]  # Limitar longitud
            
            report.add_result("Cochilco", True, details)
        else:
            print("‚ùå Error en sincronizaci√≥n de inventarios de cobre")
            logging.error("Cochilco: Error en sincronizaci√≥n")
            report.add_result("Cochilco", False, error="Error en sincronizaci√≥n")
            
    except Exception as e:
        error_msg = f"Error cr√≠tico en sincronizaci√≥n Cochilco: {e}"
        print(f"‚ùå {error_msg}")
        logging.error(f"Cochilco: {error_msg}")
        logging.error(traceback.format_exc())
        report.add_result("Cochilco", False, error=error_msg)

def sync_smm_prices(report):
    """
    Sincroniza precios de cobre y litio desde SMM usando el bot Playwright.
    """
    print("üîÑ Iniciando sincronizaci√≥n de precios SMM (Cobre + Litio) - Playwright...")
    logging.info("Iniciando sincronizaci√≥n SMM (Playwright)")
    
    try:
        bot = SMMPlaywrightBot(headless=False)  # VISIBLE (requerido para SMM)
        result = bot.run_workflow()
        
        if result.get("success"):
            print("‚úÖ Precios SMM sincronizados exitosamente")
            logging.info("SMM: Sincronizaci√≥n exitosa")
            
            # Extraer detalles del resultado real
            results = result.get("results", {})
            details = {}
            for key, extracted in results.items():
                details[key] = "Extra√≠do" if extracted else "No extra√≠do"
            
            # Determinar si es √©xito total o parcial
            success_count = result.get("count", 0)
            if success_count == 3:
                report.add_result("SMM", True, details)
            elif success_count > 0:
                report.add_result("SMM", True, details, partial=True)
            else:
                report.add_result("SMM", False, details, error="Ning√∫n precio extra√≠do")
        else:
            print("‚ùå Error en sincronizaci√≥n de precios SMM")
            logging.error("SMM: Error en sincronizaci√≥n")
            error_msg = result.get("error", "Error en sincronizaci√≥n")
            report.add_result("SMM", False, error=error_msg)
            
    except Exception as e:
        error_msg = f"Error cr√≠tico en sincronizaci√≥n SMM: {e}"
        print(f"‚ùå {error_msg}")
        logging.error(f"SMM: {error_msg}")
        logging.error(traceback.format_exc())
        report.add_result("SMM", False, error=error_msg)


# --- Forward Fill Centralizado (Business Days) ---
def _get_series_id_by_ticker(ticker: str) -> str | None:
    try:
        res = supabase.table('series_definitions').select('id').eq('ticker', ticker).limit(1).execute()
        if res and res.data:
            return res.data[0]['id']
    except Exception as e:
        logging.error(f"ForwardFill: error obteniendo series_id para {ticker}: {e}")
    return None


def forward_fill_business_days_for_ticker(ticker: str) -> dict:
    """Rellena d√≠as h√°biles faltantes desde el √∫ltimo dato disponible hasta hoy.
    - No crea fines de semana
    - Upsert idempotente (series_id,timestamp)
    """
    try:
        series_id = _get_series_id_by_ticker(ticker)
        if not series_id:
            return {"ticker": ticker, "filled": 0, "status": "series_not_found"}

        # √öltimo dato existente
        last_res = supabase.table('time_series_data').select('timestamp,value').eq('series_id', series_id).order('timestamp', desc=True).limit(1).execute()
        if not last_res or not last_res.data:
            return {"ticker": ticker, "filled": 0, "status": "no_existing_data"}

        last_ts_raw = last_res.data[0]['timestamp']
        # Normalizar timestamp a 'YYYY-MM-DD' (algunas filas vienen con 'T00:00:00+00:00')
        last_ts_str = str(last_ts_raw)[:10]
        last_val = last_res.data[0]['value']
        last_date = datetime.strptime(last_ts_str, '%Y-%m-%d').date()

        today = datetime.now().date()
        if last_date >= today:
            return {"ticker": ticker, "filled": 0, "status": "up_to_date"}

        # Rango de d√≠as h√°biles desde el d√≠a siguiente al √∫ltimo dato hasta hoy
        start_bday = pd.Timestamp(last_date) + pd.tseries.offsets.BDay(1)
        if start_bday.date() > today:
            return {"ticker": ticker, "filled": 0, "status": "no_business_days_to_fill"}

        bdays = pd.bdate_range(start=start_bday.date(), end=today, freq='B')
        records = []
        for d in bdays:
            records.append({
                'series_id': series_id,
                'timestamp': d.strftime('%Y-%m-%d'),
                'value': last_val,
                'ticker': ticker,
            })

        filled = 0
        if records:
            upsert = supabase.table('time_series_data').upsert(records, on_conflict='series_id,timestamp').execute()
            if upsert and upsert.data is not None:
                filled = len(records)
        logging.info(f"ForwardFill[{ticker}]: desde {start_bday.date()} hasta {today} -> {filled} d√≠as h√°biles")
        return {"ticker": ticker, "filled": filled, "status": "ok", "from": start_bday.strftime('%Y-%m-%d'), "to": today.strftime('%Y-%m-%d')}

    except Exception as e:
        logging.error(f"ForwardFill[{ticker}] error: {e}")
        return {"ticker": ticker, "filled": 0, "status": f"error: {e}"}


def forward_fill_business_days_for_tickers(tickers: list[str]) -> dict:
    summary = {}
    for t in tickers:
        summary[t] = forward_fill_business_days_for_ticker(t)
    return summary

def orchestrate_all_syncs():
    """
    Orquesta la sincronizaci√≥n de todas las fuentes de datos AUTOM√ÅTICAS
    definidas en la base de datos.
    """
    # Configurar logging solo a consola
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[logging.StreamHandler()]  # Solo consola, sin archivo
    )
    
    # Inicializar reporte
    report = SyncReport()
    
    print("--- üéº Iniciando Orquestador de Sincronizaci√≥n Autom√°tica ---")
    logging.info("Iniciando orquestador de sincronizaci√≥n autom√°tica")

    if not supabase:
        error_msg = "No se pudo conectar con Supabase. Proceso abortado."
        print(f"‚ùå Error: {error_msg}")
        logging.error(error_msg)
        report.add_result("Supabase", False, error=error_msg)
        print(report.generate_report())
        return

    try:
        # --- Tareas de Renta Variable y Similares (OHLCV) ---
        print("\n--- ‚ñ∂Ô∏è  Iniciando sincronizaci√≥n de datos OHLCV... ---")
        logging.info("Iniciando sincronizaci√≥n OHLCV")
        
        try:
            sync_yfinance_data_to_supabase()
            report.add_result("Yahoo Finance", True, {"tipo": "OHLCV"})
            logging.info("Yahoo Finance: Sincronizaci√≥n exitosa")
        except Exception as e:
            error_msg = f"Error en Yahoo Finance: {e}"
            logging.error(error_msg)
            report.add_result("Yahoo Finance", False, error=error_msg)
        
        try:
            sync_eodhd_data_to_supabase() # La parte de OHLCV de EODHD
            report.add_result("EODHD OHLCV", True, {"tipo": "OHLCV"})
            logging.info("EODHD OHLCV: Sincronizaci√≥n exitosa")
        except Exception as e:
            error_msg = f"Error en EODHD OHLCV: {e}"
            logging.error(error_msg)
            report.add_result("EODHD OHLCV", False, error=error_msg)

        # --- Tareas de Renta Fija Internacional ---
        print("\n--- ‚ñ∂Ô∏è  Iniciando sincronizaci√≥n de Renta Fija Internacional... ---")
        logging.info("Iniciando sincronizaci√≥n Renta Fija Internacional")
        
        try:
            sync_us_treasuries_yields() # Bonos USA de EODHD
            report.add_result("US Treasuries", True, {"tipo": "Renta Fija"})
            logging.info("US Treasuries: Sincronizaci√≥n exitosa")
        except Exception as e:
            error_msg = f"Error en US Treasuries: {e}"
            logging.error(error_msg)
            report.add_result("US Treasuries", False, error=error_msg)
        
        try:
            sync_bce_rates()            # Curva de rendimientos de BCE
            report.add_result("BCE Rates", True, {"tipo": "Renta Fija"})
            logging.info("BCE Rates: Sincronizaci√≥n exitosa")
        except Exception as e:
            error_msg = f"Error en BCE Rates: {e}"
            logging.error(error_msg)
            report.add_result("BCE Rates", False, error=error_msg)

        # --- Tareas de Indicadores Econ√≥micos Chile ---
        print("\n--- ‚ñ∂Ô∏è  Iniciando sincronizaci√≥n de Indicadores Econ√≥micos Chile... ---")
        logging.info("Iniciando sincronizaci√≥n Indicadores Econ√≥micos Chile")
        
        try:
            sync_all_bcentral_series()  # TPM y Posici√≥n Forward Extranjeros
            report.add_result("Banco Central Chile", True, {"tipo": "Indicadores Econ√≥micos"})
            logging.info("Banco Central Chile: Sincronizaci√≥n exitosa")
        except Exception as e:
            error_msg = f"Error en Banco Central Chile: {e}"
            logging.error(error_msg)
            report.add_result("Banco Central Chile", False, error=error_msg)

        # --- Benchmarks Renta Fija Chile (BTP 2/5/10) ---
        print("\n--- ‚ñ∂Ô∏è  Actualizando Benchmarks BTP (CLP) ... ---")
        try:
            bench_res = sync_btp_benchmarks()
            report.add_result("BTP Benchmarks", True, bench_res)
            logging.info(f"BTP Benchmarks: {bench_res}")
        except Exception as e:
            error_msg = f"Error en BTP Benchmarks: {e}"
            logging.error(error_msg)
            report.add_result("BTP Benchmarks", False, error=error_msg)

        # --- √çndice de Monedas LATAM ---
        print("\n--- ‚ñ∂Ô∏è  Actualizando √çndice de Monedas LATAM ... ---")
        try:
            latam_res = sync_latam_currency_index()
            report.add_result("LATAM Currency Index", True, latam_res)
            logging.info(f"LATAM Currency Index: {latam_res}")
        except Exception as e:
            error_msg = f"Error en LATAM Currency Index: {e}"
            logging.error(error_msg)
            report.add_result("LATAM Currency Index", False, error=error_msg)

        # --- Serie Hist√≥rica √çndice LATAM ---
        print("\n--- ‚ñ∂Ô∏è  Generando Serie Hist√≥rica √çndice LATAM ... ---")
        try:
            historical_res = sync_latam_currency_index_historical(days_back=1000)
            report.add_result("LATAM Historical Series", True, historical_res)
            logging.info(f"LATAM Historical Series: {historical_res}")
        except Exception as e:
            error_msg = f"Error en Serie Hist√≥rica LATAM: {e}"
            logging.error(error_msg)
            report.add_result("LATAM Historical Series", False, error=error_msg)

        # --- Tareas de Inventarios de Cobre (Cochilco) ---
        print("\n--- ‚ñ∂Ô∏è  Iniciando sincronizaci√≥n de Inventarios de Cobre... ---")
        sync_cochilco_inventories(report)

        # --- Tareas de Precios SMM (Cobre + Litio) ---
        print("\n--- ‚ñ∂Ô∏è  Iniciando sincronizaci√≥n de Precios SMM... ---")
        sync_smm_prices(report)

        # --- Forward Fill centralizado para series diarias (Business Days) ---
        print("\n--- ‚ñ∂Ô∏è  Forward Fill (Business Days) para series diarias ... ---")
        try:
            # SMM precios diarios
            smm_tickers = ['shfe', 'lme', 'Lithium China']

            # Inventarios Cochilco (seg√∫n mapeo en cochilco_final_bot)
            cochilco_inventory_tickers = [
                'inventarios_lme',
                'inventarios_comex',
                'inventarios_shfe',
                'inventarios_totales'
            ]

            # Series Banco Central de Chile (seg√∫n sync_bcentral)
            bcch_tickers = [
                'chile_tpm',
                'Posicion Extranjera CLP',
                'us_tpm'
            ]

            all_ff_tickers = smm_tickers + cochilco_inventory_tickers + bcch_tickers
            ff_summary = forward_fill_business_days_for_tickers(all_ff_tickers)
            report.add_result("ForwardFill", True, ff_summary)
            logging.info(f"ForwardFill resumen: {ff_summary}")
        except Exception as e:
            error_msg = f"Error en ForwardFill centralizado: {e}"
            logging.error(error_msg)
            report.add_result("ForwardFill", False, error=error_msg)

        print("\n\n--- ‚úÖ Orquestaci√≥n Autom√°tica Completada Exitosamente ---")
        print("‚ÑπÔ∏è  Nota: La ingesta de Renta Fija local (PDF) se ejecuta por separado.")
        logging.info("Orquestaci√≥n autom√°tica completada exitosamente")

    except Exception as e:
        error_msg = f"ERROR CR√çTICO en el Orquestador: {e}"
        print(f"--- üí• {error_msg} ---")
        logging.error(error_msg)
        logging.error(traceback.format_exc())
        report.add_result("Orquestador", False, error=error_msg)

    finally:
        # Generar y mostrar reporte final
        print("\n" + report.generate_report())
        logging.info("Reporte final generado")


if __name__ == "__main__":
    orchestrate_all_syncs()